
POT_TO_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002218  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002354  08002354  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002354  08002354  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002354  08002354  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002354  08002354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002358  08002358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800235c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000004  08002360  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002360  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000567e  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000137d  00000000  00000000  000256ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  00026a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  00027210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000130bb  00000000  00000000  00027950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005201  00000000  00000000  0003aa0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000675b7  00000000  00000000  0003fc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a71c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000207c  00000000  00000000  000a7214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800230c 	.word	0x0800230c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800230c 	.word	0x0800230c

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	; (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	; 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d103      	bne.n	80002bc <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	334c      	adds	r3, #76	; 0x4c
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	e001      	b.n	80002c0 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <LL_ADC_DMA_GetRegAddr+0x2c>)
 80002be:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 80002c0:	68fb      	ldr	r3, [r7, #12]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	4001244c 	.word	0x4001244c

080002d0 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b089      	sub	sp, #36	; 0x24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	332c      	adds	r3, #44	; 0x2c
 80002e0:	4619      	mov	r1, r3
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80002e8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002ec:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002ee:	69ba      	ldr	r2, [r7, #24]
 80002f0:	fa92 f2a2 	rbit	r2, r2
 80002f4:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002f6:	697a      	ldr	r2, [r7, #20]
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	440b      	add	r3, r1
 8000304:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	f003 031f 	and.w	r3, r3, #31
 8000310:	211f      	movs	r1, #31
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	43db      	mvns	r3, r3
 8000318:	401a      	ands	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f003 011f 	and.w	r1, r3, #31
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	f003 031f 	and.w	r3, r3, #31
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	431a      	orrs	r2, r3
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000330:	bf00      	nop
 8000332:	3724      	adds	r7, #36	; 0x24
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr

0800033a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800033a:	b480      	push	{r7}
 800033c:	b08d      	sub	sp, #52	; 0x34
 800033e:	af00      	add	r7, sp, #0
 8000340:	60f8      	str	r0, [r7, #12]
 8000342:	60b9      	str	r1, [r7, #8]
 8000344:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	330c      	adds	r3, #12
 800034a:	4619      	mov	r1, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000358:	69ba      	ldr	r2, [r7, #24]
 800035a:	fa92 f2a2 	rbit	r2, r2
 800035e:	617a      	str	r2, [r7, #20]
  return result;
 8000360:	697a      	ldr	r2, [r7, #20]
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	b2d2      	uxtb	r2, r2
 8000368:	40d3      	lsrs	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	440b      	add	r3, r1
 800036e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800037a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800037e:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000380:	6a39      	ldr	r1, [r7, #32]
 8000382:	fa91 f1a1 	rbit	r1, r1
 8000386:	61f9      	str	r1, [r7, #28]
  return result;
 8000388:	69f9      	ldr	r1, [r7, #28]
 800038a:	fab1 f181 	clz	r1, r1
 800038e:	b2c9      	uxtb	r1, r1
 8000390:	40cb      	lsrs	r3, r1
 8000392:	2107      	movs	r1, #7
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	401a      	ands	r2, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80003a2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80003a6:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80003aa:	fa91 f1a1 	rbit	r1, r1
 80003ae:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80003b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80003b2:	fab1 f181 	clz	r1, r1
 80003b6:	b2c9      	uxtb	r1, r1
 80003b8:	40cb      	lsrs	r3, r1
 80003ba:	6879      	ldr	r1, [r7, #4]
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	431a      	orrs	r2, r3
 80003c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80003c6:	bf00      	nop
 80003c8:	3734      	adds	r7, #52	; 0x34
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f043 0201 	orr.w	r2, r3, #1
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	609a      	str	r2, [r3, #8]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	2b01      	cmp	r3, #1
 8000400:	bf0c      	ite	eq
 8000402:	2301      	moveq	r3, #1
 8000404:	2300      	movne	r3, #0
 8000406:	b2db      	uxtb	r3, r3
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr

08000412 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	609a      	str	r2, [r3, #8]
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	3b01      	subs	r3, #1
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LL_DMA_EnableChannel+0x38>)
 8000440:	5cd3      	ldrb	r3, [r2, r3]
 8000442:	461a      	mov	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4413      	add	r3, r2
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	3a01      	subs	r2, #1
 800044e:	4906      	ldr	r1, [pc, #24]	; (8000468 <LL_DMA_EnableChannel+0x38>)
 8000450:	5c8a      	ldrb	r2, [r1, r2]
 8000452:	4611      	mov	r1, r2
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	440a      	add	r2, r1
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6013      	str	r3, [r2, #0]
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	08002324 	.word	0x08002324

0800046c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	3b01      	subs	r3, #1
 800047a:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <LL_DMA_DisableChannel+0x38>)
 800047c:	5cd3      	ldrb	r3, [r2, r3]
 800047e:	461a      	mov	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4413      	add	r3, r2
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	3a01      	subs	r2, #1
 800048a:	4906      	ldr	r1, [pc, #24]	; (80004a4 <LL_DMA_DisableChannel+0x38>)
 800048c:	5c8a      	ldrb	r2, [r1, r2]
 800048e:	4611      	mov	r1, r2
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	440a      	add	r2, r1
 8000494:	f023 0301 	bic.w	r3, r3, #1
 8000498:	6013      	str	r3, [r2, #0]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	08002324 	.word	0x08002324

080004a8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <LL_DMA_SetDataTransferDirection+0x44>)
 80004ba:	5cd3      	ldrb	r3, [r2, r3]
 80004bc:	461a      	mov	r2, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	4413      	add	r3, r2
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004c8:	f023 0310 	bic.w	r3, r3, #16
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	3a01      	subs	r2, #1
 80004d0:	4906      	ldr	r1, [pc, #24]	; (80004ec <LL_DMA_SetDataTransferDirection+0x44>)
 80004d2:	5c8a      	ldrb	r2, [r1, r2]
 80004d4:	4611      	mov	r1, r2
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	440a      	add	r2, r1
 80004da:	4611      	mov	r1, r2
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	4313      	orrs	r3, r2
 80004e0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	08002324 	.word	0x08002324

080004f0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	3b01      	subs	r3, #1
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <LL_DMA_SetMode+0x40>)
 8000502:	5cd3      	ldrb	r3, [r2, r3]
 8000504:	461a      	mov	r2, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	4413      	add	r3, r2
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f023 0220 	bic.w	r2, r3, #32
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	3b01      	subs	r3, #1
 8000514:	4906      	ldr	r1, [pc, #24]	; (8000530 <LL_DMA_SetMode+0x40>)
 8000516:	5ccb      	ldrb	r3, [r1, r3]
 8000518:	4619      	mov	r1, r3
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	440b      	add	r3, r1
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4313      	orrs	r3, r2
 8000524:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	08002324 	.word	0x08002324

08000534 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	3b01      	subs	r3, #1
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <LL_DMA_SetPeriphIncMode+0x40>)
 8000546:	5cd3      	ldrb	r3, [r2, r3]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	3b01      	subs	r3, #1
 8000558:	4906      	ldr	r1, [pc, #24]	; (8000574 <LL_DMA_SetPeriphIncMode+0x40>)
 800055a:	5ccb      	ldrb	r3, [r1, r3]
 800055c:	4619      	mov	r1, r3
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	440b      	add	r3, r1
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4313      	orrs	r3, r2
 8000568:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	08002324 	.word	0x08002324

08000578 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <LL_DMA_SetMemoryIncMode+0x40>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	461a      	mov	r2, r3
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3b01      	subs	r3, #1
 800059c:	4906      	ldr	r1, [pc, #24]	; (80005b8 <LL_DMA_SetMemoryIncMode+0x40>)
 800059e:	5ccb      	ldrb	r3, [r1, r3]
 80005a0:	4619      	mov	r1, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	440b      	add	r3, r1
 80005a6:	4619      	mov	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	08002324 	.word	0x08002324

080005bc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <LL_DMA_SetPeriphSize+0x40>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	461a      	mov	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4906      	ldr	r1, [pc, #24]	; (80005fc <LL_DMA_SetPeriphSize+0x40>)
 80005e2:	5ccb      	ldrb	r3, [r1, r3]
 80005e4:	4619      	mov	r1, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	440b      	add	r3, r1
 80005ea:	4619      	mov	r1, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	08002324 	.word	0x08002324

08000600 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	3b01      	subs	r3, #1
 8000610:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <LL_DMA_SetMemorySize+0x40>)
 8000612:	5cd3      	ldrb	r3, [r2, r3]
 8000614:	461a      	mov	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3b01      	subs	r3, #1
 8000624:	4906      	ldr	r1, [pc, #24]	; (8000640 <LL_DMA_SetMemorySize+0x40>)
 8000626:	5ccb      	ldrb	r3, [r1, r3]
 8000628:	4619      	mov	r1, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	440b      	add	r3, r1
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4313      	orrs	r3, r2
 8000634:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	08002324 	.word	0x08002324

08000644 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	3b01      	subs	r3, #1
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	461a      	mov	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4413      	add	r3, r2
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	3b01      	subs	r3, #1
 8000668:	4906      	ldr	r1, [pc, #24]	; (8000684 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800066a:	5ccb      	ldrb	r3, [r1, r3]
 800066c:	4619      	mov	r1, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	440b      	add	r3, r1
 8000672:	4619      	mov	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4313      	orrs	r3, r2
 8000678:	600b      	str	r3, [r1, #0]
             Priority);
}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	08002324 	.word	0x08002324

08000688 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	3b01      	subs	r3, #1
 8000698:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <LL_DMA_SetDataLength+0x40>)
 800069a:	5cd3      	ldrb	r3, [r2, r3]
 800069c:	461a      	mov	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	0c1b      	lsrs	r3, r3, #16
 80006a6:	041b      	lsls	r3, r3, #16
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	3a01      	subs	r2, #1
 80006ac:	4906      	ldr	r1, [pc, #24]	; (80006c8 <LL_DMA_SetDataLength+0x40>)
 80006ae:	5c8a      	ldrb	r2, [r1, r2]
 80006b0:	4611      	mov	r1, r2
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	440a      	add	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	08002324 	.word	0x08002324

080006cc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	2b10      	cmp	r3, #16
 80006de:	d114      	bne.n	800070a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	4a15      	ldr	r2, [pc, #84]	; (800073c <LL_DMA_ConfigAddresses+0x70>)
 80006e6:	5cd3      	ldrb	r3, [r2, r3]
 80006e8:	461a      	mov	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	4413      	add	r3, r2
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a10      	ldr	r2, [pc, #64]	; (800073c <LL_DMA_ConfigAddresses+0x70>)
 80006fa:	5cd3      	ldrb	r3, [r2, r3]
 80006fc:	461a      	mov	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	4413      	add	r3, r2
 8000702:	461a      	mov	r2, r3
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8000708:	e013      	b.n	8000732 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	3b01      	subs	r3, #1
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <LL_DMA_ConfigAddresses+0x70>)
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3b01      	subs	r3, #1
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <LL_DMA_ConfigAddresses+0x70>)
 8000724:	5cd3      	ldrb	r3, [r2, r3]
 8000726:	461a      	mov	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4413      	add	r3, r2
 800072c:	461a      	mov	r2, r3
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	60d3      	str	r3, [r2, #12]
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	08002324 	.word	0x08002324

08000740 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <LL_RCC_HSE_EnableBypass+0x18>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a03      	ldr	r2, [pc, #12]	; (8000758 <LL_RCC_HSE_EnableBypass+0x18>)
 800074a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000

0800075c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <LL_RCC_HSE_Enable+0x18>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <LL_RCC_HSE_Enable+0x18>)
 8000766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000

08000778 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_HSE_IsReady+0x20>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000788:	bf0c      	ite	eq
 800078a:	2301      	moveq	r3, #1
 800078c:	2300      	movne	r3, #0
 800078e:	b2db      	uxtb	r3, r3
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000

0800079c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <LL_RCC_SetSysClkSource+0x24>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f023 0203 	bic.w	r2, r3, #3
 80007ac:	4904      	ldr	r1, [pc, #16]	; (80007c0 <LL_RCC_SetSysClkSource+0x24>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	604b      	str	r3, [r1, #4]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <LL_RCC_GetSysClkSource+0x14>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f003 030c 	and.w	r3, r3, #12
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40021000 	.word	0x40021000

080007dc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <LL_RCC_SetAHBPrescaler+0x24>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007ec:	4904      	ldr	r1, [pc, #16]	; (8000800 <LL_RCC_SetAHBPrescaler+0x24>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	604b      	str	r3, [r1, #4]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <LL_RCC_SetAPB1Prescaler+0x24>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000814:	4904      	ldr	r1, [pc, #16]	; (8000828 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4313      	orrs	r3, r2
 800081a:	604b      	str	r3, [r1, #4]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800083c:	4904      	ldr	r1, [pc, #16]	; (8000850 <LL_RCC_SetAPB2Prescaler+0x24>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4313      	orrs	r3, r2
 8000842:	604b      	str	r3, [r1, #4]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <LL_RCC_SetADCClockSource+0x24>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000864:	4904      	ldr	r1, [pc, #16]	; (8000878 <LL_RCC_SetADCClockSource+0x24>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	604b      	str	r3, [r1, #4]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <LL_RCC_PLL_Enable+0x18>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <LL_RCC_PLL_Enable+0x18>)
 8000886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40021000 	.word	0x40021000

08000898 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <LL_RCC_PLL_IsReady+0x20>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000

080008bc <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	430b      	orrs	r3, r1
 80008d8:	4903      	ldr	r1, [pc, #12]	; (80008e8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80008da:	4313      	orrs	r3, r2
 80008dc:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	40021000 	.word	0x40021000

080008ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	4907      	ldr	r1, [pc, #28]	; (8000918 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000902:	695a      	ldr	r2, [r3, #20]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4013      	ands	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000926:	69da      	ldr	r2, [r3, #28]
 8000928:	4907      	ldr	r1, [pc, #28]	; (8000948 <LL_APB1_GRP1_EnableClock+0x2c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4313      	orrs	r3, r2
 800092e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000932:	69da      	ldr	r2, [r3, #28]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4013      	ands	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000956:	699a      	ldr	r2, [r3, #24]
 8000958:	4907      	ldr	r1, [pc, #28]	; (8000978 <LL_APB2_GRP1_EnableClock+0x2c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4313      	orrs	r3, r2
 800095e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000962:	699a      	ldr	r2, [r3, #24]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4013      	ands	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <LL_FLASH_SetLatency+0x24>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f023 0207 	bic.w	r2, r3, #7
 800098c:	4904      	ldr	r1, [pc, #16]	; (80009a0 <LL_FLASH_SetLatency+0x24>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4313      	orrs	r3, r2
 8000992:	600b      	str	r3, [r1, #0]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <LL_FLASH_GetLatency+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0307 	and.w	r3, r3, #7
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40022000 	.word	0x40022000

080009bc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f043 0201 	orr.w	r2, r3, #1
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a1a      	ldr	r2, [r3, #32]
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	621a      	str	r2, [r3, #32]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d01c      	beq.n	8000a62 <LL_TIM_OC_DisableFast+0x4a>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d017      	beq.n	8000a5e <LL_TIM_OC_DisableFast+0x46>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b10      	cmp	r3, #16
 8000a32:	d012      	beq.n	8000a5a <LL_TIM_OC_DisableFast+0x42>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	2b40      	cmp	r3, #64	; 0x40
 8000a38:	d00d      	beq.n	8000a56 <LL_TIM_OC_DisableFast+0x3e>
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a40:	d007      	beq.n	8000a52 <LL_TIM_OC_DisableFast+0x3a>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a48:	d101      	bne.n	8000a4e <LL_TIM_OC_DisableFast+0x36>
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	e00a      	b.n	8000a64 <LL_TIM_OC_DisableFast+0x4c>
 8000a4e:	2306      	movs	r3, #6
 8000a50:	e008      	b.n	8000a64 <LL_TIM_OC_DisableFast+0x4c>
 8000a52:	2304      	movs	r3, #4
 8000a54:	e006      	b.n	8000a64 <LL_TIM_OC_DisableFast+0x4c>
 8000a56:	2303      	movs	r3, #3
 8000a58:	e004      	b.n	8000a64 <LL_TIM_OC_DisableFast+0x4c>
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	e002      	b.n	8000a64 <LL_TIM_OC_DisableFast+0x4c>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e000      	b.n	8000a64 <LL_TIM_OC_DisableFast+0x4c>
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3318      	adds	r3, #24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LL_TIM_OC_DisableFast+0x80>)
 8000a70:	5cd3      	ldrb	r3, [r2, r3]
 8000a72:	440b      	add	r3, r1
 8000a74:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	4907      	ldr	r1, [pc, #28]	; (8000a9c <LL_TIM_OC_DisableFast+0x84>)
 8000a7e:	5ccb      	ldrb	r3, [r1, r3]
 8000a80:	4619      	mov	r1, r3
 8000a82:	2304      	movs	r3, #4
 8000a84:	408b      	lsls	r3, r1
 8000a86:	43db      	mvns	r3, r3
 8000a88:	401a      	ands	r2, r3
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	601a      	str	r2, [r3, #0]

}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	0800232c 	.word	0x0800232c
 8000a9c:	08002334 	.word	0x08002334

08000aa0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d01c      	beq.n	8000aea <LL_TIM_OC_EnablePreload+0x4a>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d017      	beq.n	8000ae6 <LL_TIM_OC_EnablePreload+0x46>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b10      	cmp	r3, #16
 8000aba:	d012      	beq.n	8000ae2 <LL_TIM_OC_EnablePreload+0x42>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2b40      	cmp	r3, #64	; 0x40
 8000ac0:	d00d      	beq.n	8000ade <LL_TIM_OC_EnablePreload+0x3e>
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ac8:	d007      	beq.n	8000ada <LL_TIM_OC_EnablePreload+0x3a>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ad0:	d101      	bne.n	8000ad6 <LL_TIM_OC_EnablePreload+0x36>
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	e00a      	b.n	8000aec <LL_TIM_OC_EnablePreload+0x4c>
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	e008      	b.n	8000aec <LL_TIM_OC_EnablePreload+0x4c>
 8000ada:	2304      	movs	r3, #4
 8000adc:	e006      	b.n	8000aec <LL_TIM_OC_EnablePreload+0x4c>
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e004      	b.n	8000aec <LL_TIM_OC_EnablePreload+0x4c>
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	e002      	b.n	8000aec <LL_TIM_OC_EnablePreload+0x4c>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e000      	b.n	8000aec <LL_TIM_OC_EnablePreload+0x4c>
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3318      	adds	r3, #24
 8000af2:	4619      	mov	r1, r3
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LL_TIM_OC_EnablePreload+0x80>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	440b      	add	r3, r1
 8000afc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <LL_TIM_OC_EnablePreload+0x84>)
 8000b06:	5ccb      	ldrb	r3, [r1, r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	408b      	lsls	r3, r1
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	0800232c 	.word	0x0800232c
 8000b24:	08002334 	.word	0x08002334

08000b28 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b54:	f023 0307 	bic.w	r3, r3, #7
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	605a      	str	r2, [r3, #4]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	60da      	str	r2, [r3, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	691b      	ldr	r3, [r3, #16]
 8000bd6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	615a      	str	r2, [r3, #20]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000bf4:	b490      	push	{r4, r7}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	461a      	mov	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	0e1b      	lsrs	r3, r3, #24
 8000c08:	4413      	add	r3, r2
 8000c0a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000c0c:	6822      	ldr	r2, [r4, #0]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	fa93 f3a3 	rbit	r3, r3
 8000c18:	613b      	str	r3, [r7, #16]
  return result;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	fab3 f383 	clz	r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	210f      	movs	r1, #15
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa93 f3a3 	rbit	r3, r3
 8000c38:	61bb      	str	r3, [r7, #24]
  return result;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	fab3 f383 	clz	r3, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	6023      	str	r3, [r4, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	3720      	adds	r7, #32
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc90      	pop	{r4, r7}
 8000c56:	4770      	bx	lr

08000c58 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	615a      	str	r2, [r3, #20]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
	...

08000c78 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000c82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c86:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c92:	6053      	str	r3, [r2, #4]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000caa:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <LL_GPIO_AF_SetEXTISource+0x58>)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	0c1b      	lsrs	r3, r3, #16
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	ea02 0103 	and.w	r1, r2, r3
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	fa93 f3a3 	rbit	r3, r3
 8000ccc:	60bb      	str	r3, [r7, #8]
  return result;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	fab3 f383 	clz	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	fa03 f202 	lsl.w	r2, r3, r2
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <LL_GPIO_AF_SetEXTISource+0x58>)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40010000 	.word	0x40010000

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fe22 	bl	800094c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000d08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d0c:	f7ff fe06 	bl	800091c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f7ff fa1b 	bl	800014c <__NVIC_SetPriorityGrouping>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000d16:	f7ff ffaf 	bl	8000c78 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1a:	f000 f823 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1e:	f000 f9c9 	bl	80010b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d22:	f000 f9af 	bl	8001084 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d26:	f000 f957 	bl	8000fd8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d2a:	f000 f85f 	bl	8000dec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d2e:	f000 f8e7 	bl	8000f00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* Configure and start DMA for ADC */
  Start_ADC_DMA();
 8000d32:	f000 fa21 	bl	8001178 <Start_ADC_DMA>

  /* Start ADC */
  Start_ADC();
 8000d36:	f000 fa47 	bl	80011c8 <Start_ADC>

  /* Start PWM */
  Start_PWM();
 8000d3a:	f000 fa59 	bl	80011f0 <Start_PWM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Read value from ADC Buffer */
	  adcVal = adcBuf[0];
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <main+0x60>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	80fb      	strh	r3, [r7, #6]
	  /* If value is not NULL, Set PWM Duty Cycle to it(value) */
	  if(adcVal != '\0') {
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f9      	beq.n	8000d3e <main+0x42>
		  /*
		   * adcVal division by 16 is to make its value smaller,
		   * STM32F1 ADC has a 12 bit resolution its values range from 0-4095, 2^12 = 4096
		   * We divide by 12 to get a maximum of 255
		   */
		  LL_TIM_OC_SetCompareCH1(TIM3, (adcVal / 16));
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4619      	mov	r1, r3
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <main+0x64>)
 8000d54:	f7ff fee8 	bl	8000b28 <LL_TIM_OC_SetCompareCH1>
	  adcVal = adcBuf[0];
 8000d58:	e7f1      	b.n	8000d3e <main+0x42>
 8000d5a:	bf00      	nop
 8000d5c:	20000020 	.word	0x20000020
 8000d60:	40000400 	.word	0x40000400

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff fe07 	bl	800097c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000d6e:	bf00      	nop
 8000d70:	f7ff fe18 	bl	80009a4 <LL_FLASH_GetLatency>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d1fa      	bne.n	8000d70 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_EnableBypass();
 8000d7a:	f7ff fce1 	bl	8000740 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8000d7e:	f7ff fced 	bl	800075c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000d82:	bf00      	nop
 8000d84:	f7ff fcf8 	bl	8000778 <LL_RCC_HSE_IsReady>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d1fa      	bne.n	8000d84 <SystemClock_Config+0x20>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000d8e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000d92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000d96:	f7ff fd91 	bl	80008bc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d9a:	f7ff fd6f 	bl	800087c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d9e:	bf00      	nop
 8000da0:	f7ff fd7a 	bl	8000898 <LL_RCC_PLL_IsReady>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d1fa      	bne.n	8000da0 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff fd16 	bl	80007dc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000db0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000db4:	f7ff fd26 	bl	8000804 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fd37 	bl	800082c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff fcec 	bl	800079c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000dc4:	bf00      	nop
 8000dc6:	f7ff fcfd 	bl	80007c4 <LL_RCC_GetSysClkSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d1fa      	bne.n	8000dc6 <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(72000000);
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <SystemClock_Config+0x84>)
 8000dd2:	f001 fa53 	bl	800227c <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8000dd6:	4804      	ldr	r0, [pc, #16]	; (8000de8 <SystemClock_Config+0x84>)
 8000dd8:	f001 fa5e 	bl	8002298 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8000ddc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000de0:	f7ff fd38 	bl	8000854 <LL_RCC_SetADCClockSource>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	044aa200 	.word	0x044aa200

08000dec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000e1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e22:	f7ff fd93 	bl	800094c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000e26:	2004      	movs	r0, #4
 8000e28:	f7ff fd90 	bl	800094c <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000e2c:	f240 1301 	movw	r3, #257	; 0x101
 8000e30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e3c:	f000 fcff 	bl	800183e <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2101      	movs	r1, #1
 8000e44:	482c      	ldr	r0, [pc, #176]	; (8000ef8 <MX_ADC1_Init+0x10c>)
 8000e46:	f7ff fb2f 	bl	80004a8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	482a      	ldr	r0, [pc, #168]	; (8000ef8 <MX_ADC1_Init+0x10c>)
 8000e50:	f7ff fbf8 	bl	8000644 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000e54:	2220      	movs	r2, #32
 8000e56:	2101      	movs	r1, #1
 8000e58:	4827      	ldr	r0, [pc, #156]	; (8000ef8 <MX_ADC1_Init+0x10c>)
 8000e5a:	f7ff fb49 	bl	80004f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2101      	movs	r1, #1
 8000e62:	4825      	ldr	r0, [pc, #148]	; (8000ef8 <MX_ADC1_Init+0x10c>)
 8000e64:	f7ff fb66 	bl	8000534 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4822      	ldr	r0, [pc, #136]	; (8000ef8 <MX_ADC1_Init+0x10c>)
 8000e6e:	f7ff fb83 	bl	8000578 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e76:	2101      	movs	r1, #1
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <MX_ADC1_Init+0x10c>)
 8000e7a:	f7ff fb9f 	bl	80005bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8000e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e82:	2101      	movs	r1, #1
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <MX_ADC1_Init+0x10c>)
 8000e86:	f7ff fbbb 	bl	8000600 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e96:	4619      	mov	r1, r3
 8000e98:	4818      	ldr	r0, [pc, #96]	; (8000efc <MX_ADC1_Init+0x110>)
 8000e9a:	f000 fa99 	bl	80013d0 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4814      	ldr	r0, [pc, #80]	; (8000efc <MX_ADC1_Init+0x110>)
 8000eaa:	f000 fa5f 	bl	800136c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000eae:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8000eb2:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <MX_ADC1_Init+0x110>)
 8000ece:	f000 faa6 	bl	800141e <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8000ed2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <MX_ADC1_Init+0x110>)
 8000edc:	f7ff f9f8 	bl	80002d0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_ADC1_Init+0x110>)
 8000ee8:	f7ff fa27 	bl	800033a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3738      	adds	r7, #56	; 0x38
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40010800 	.word	0x40010800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40012400 	.word	0x40012400

08000f00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b092      	sub	sp, #72	; 0x48
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 f9ec 	bl	80022fc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000f32:	2002      	movs	r0, #2
 8000f34:	f7ff fcf2 	bl	800091c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7199;
 8000f38:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8000f3c:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 99;
 8000f42:	2363      	movs	r3, #99	; 0x63
 8000f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481f      	ldr	r0, [pc, #124]	; (8000fd0 <MX_TIM3_Init+0xd0>)
 8000f52:	f000 fe57 	bl	8001c04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000f56:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <MX_TIM3_Init+0xd0>)
 8000f58:	f7ff fd3f 	bl	80009da <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <MX_TIM3_Init+0xd0>)
 8000f60:	f7ff fdef 	bl	8000b42 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8000f64:	2101      	movs	r1, #1
 8000f66:	481a      	ldr	r0, [pc, #104]	; (8000fd0 <MX_TIM3_Init+0xd0>)
 8000f68:	f7ff fd9a 	bl	8000aa0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000f6c:	2360      	movs	r3, #96	; 0x60
 8000f6e:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	461a      	mov	r2, r3
 8000f86:	2101      	movs	r1, #1
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <MX_TIM3_Init+0xd0>)
 8000f8a:	f000 fe99 	bl	8001cc0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <MX_TIM3_Init+0xd0>)
 8000f92:	f7ff fd41 	bl	8000a18 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000f96:	2100      	movs	r1, #0
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM3_Init+0xd0>)
 8000f9a:	f7ff fde6 	bl	8000b6a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <MX_TIM3_Init+0xd0>)
 8000fa0:	f7ff fdf5 	bl	8000b8e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000fa4:	2004      	movs	r0, #4
 8000fa6:	f7ff fcd1 	bl	800094c <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000faa:	f244 0340 	movw	r3, #16448	; 0x4040
 8000fae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fb0:	2309      	movs	r3, #9
 8000fb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_TIM3_Init+0xd4>)
 8000fc2:	f000 fc3c 	bl	800183e <LL_GPIO_Init>

}
 8000fc6:	bf00      	nop
 8000fc8:	3748      	adds	r7, #72	; 0x48
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40000400 	.word	0x40000400
 8000fd4:	40010800 	.word	0x40010800

08000fd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001000:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001004:	f7ff fc8a 	bl	800091c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001008:	2004      	movs	r0, #4
 800100a:	f7ff fc9f 	bl	800094c <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 800100e:	f240 4304 	movw	r3, #1028	; 0x404
 8001012:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001014:	2309      	movs	r3, #9
 8001016:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001018:	2302      	movs	r3, #2
 800101a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4815      	ldr	r0, [pc, #84]	; (800107c <MX_USART2_UART_Init+0xa4>)
 8001026:	f000 fc0a 	bl	800183e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 800102a:	f640 0308 	movw	r3, #2056	; 0x808
 800102e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001030:	2309      	movs	r3, #9
 8001032:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4810      	ldr	r0, [pc, #64]	; (800107c <MX_USART2_UART_Init+0xa4>)
 800103a:	f000 fc00 	bl	800183e <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800103e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001042:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001050:	230c      	movs	r3, #12
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4807      	ldr	r0, [pc, #28]	; (8001080 <MX_USART2_UART_Init+0xa8>)
 8001064:	f001 f890 	bl	8002188 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USART2_UART_Init+0xa8>)
 800106a:	f7ff fdae 	bl	8000bca <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_USART2_UART_Init+0xa8>)
 8001070:	f7ff fd9c 	bl	8000bac <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40010800 	.word	0x40010800
 8001080:	40004400 	.word	0x40004400

08001084 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fc2f 	bl	80008ec <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800108e:	f7ff f881 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8001092:	4603      	mov	r3, r0
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f8cf 	bl	800023c <NVIC_EncodePriority>
 800109e:	4603      	mov	r3, r0
 80010a0:	4619      	mov	r1, r3
 80010a2:	200b      	movs	r0, #11
 80010a4:	f7ff f8a0 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010a8:	200b      	movs	r0, #11
 80010aa:	f7ff f881 	bl	80001b0 <__NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80010d2:	2010      	movs	r0, #16
 80010d4:	f7ff fc3a 	bl	800094c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80010d8:	2020      	movs	r0, #32
 80010da:	f7ff fc37 	bl	800094c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80010de:	2004      	movs	r0, #4
 80010e0:	f7ff fc34 	bl	800094c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff fc31 	bl	800094c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80010ea:	f242 0120 	movw	r1, #8224	; 0x2020
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_GPIO_Init+0xb4>)
 80010f0:	f7ff fdb2 	bl	8000c58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE13);
 80010f4:	491d      	ldr	r1, [pc, #116]	; (800116c <MX_GPIO_Init+0xb8>)
 80010f6:	2002      	movs	r0, #2
 80010f8:	f7ff fdd2 	bl	8000ca0 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80010fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001100:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001102:	2301      	movs	r3, #1
 8001104:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001106:	2300      	movs	r3, #0
 8001108:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800110a:	2301      	movs	r3, #1
 800110c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fa5a 	bl	80015cc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_FLOATING);
 8001118:	2204      	movs	r2, #4
 800111a:	4915      	ldr	r1, [pc, #84]	; (8001170 <MX_GPIO_Init+0xbc>)
 800111c:	4815      	ldr	r0, [pc, #84]	; (8001174 <MX_GPIO_Init+0xc0>)
 800111e:	f7ff fd69 	bl	8000bf4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001122:	f242 0320 	movw	r3, #8224	; 0x2020
 8001126:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001128:	2301      	movs	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800112c:	2302      	movs	r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_GPIO_Init+0xb4>)
 800113a:	f000 fb80 	bl	800183e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800113e:	f7ff f829 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8001142:	4603      	mov	r3, r0
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f877 	bl	800023c <NVIC_EncodePriority>
 800114e:	4603      	mov	r3, r0
 8001150:	4619      	mov	r1, r3
 8001152:	2028      	movs	r0, #40	; 0x28
 8001154:	f7ff f848 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001158:	2028      	movs	r0, #40	; 0x28
 800115a:	f7ff f829 	bl	80001b0 <__NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40010800 	.word	0x40010800
 800116c:	00f00003 	.word	0x00f00003
 8001170:	04200020 	.word	0x04200020
 8001174:	40011000 	.word	0x40011000

08001178 <Start_ADC_DMA>:

/* USER CODE BEGIN 4 */

/* Configure DMA for ADC, and start it */
void Start_ADC_DMA()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af02      	add	r7, sp, #8
	// Disable DMA channel
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 800117e:	2101      	movs	r1, #1
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <Start_ADC_DMA+0x44>)
 8001182:	f7ff f973 	bl	800046c <LL_DMA_DisableChannel>

	// Set DMA Transfer addresses source and destination
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
 8001186:	2100      	movs	r1, #0
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <Start_ADC_DMA+0x48>)
 800118a:	f7ff f889 	bl	80002a0 <LL_ADC_DMA_GetRegAddr>
 800118e:	4602      	mov	r2, r0
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <Start_ADC_DMA+0x4c>)
 8001192:	2300      	movs	r3, #0
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	460b      	mov	r3, r1
 8001198:	2101      	movs	r1, #1
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <Start_ADC_DMA+0x44>)
 800119c:	f7ff fa96 	bl	80006cc <LL_DMA_ConfigAddresses>
			(uint32_t)&adcBuf, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	// Set Number of data to transfer
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, ADC_BUFFER_SIZE);
 80011a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a4:	2101      	movs	r1, #1
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <Start_ADC_DMA+0x44>)
 80011a8:	f7ff fa6e 	bl	8000688 <LL_DMA_SetDataLength>

	/* Enable DMA channel */
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 80011ac:	2101      	movs	r1, #1
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <Start_ADC_DMA+0x44>)
 80011b0:	f7ff f93e 	bl	8000430 <LL_DMA_EnableChannel>
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40012400 	.word	0x40012400
 80011c4:	20000020 	.word	0x20000020

080011c8 <Start_ADC>:

/* Enable ADC and Start Conversion */
void Start_ADC()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	/* Enable ADC and wait for it to enable */
	LL_ADC_Enable(ADC1);
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <Start_ADC+0x24>)
 80011ce:	f7ff f8ff 	bl	80003d0 <LL_ADC_Enable>
	while(!LL_ADC_IsEnabled(ADC1));
 80011d2:	bf00      	nop
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <Start_ADC+0x24>)
 80011d6:	f7ff f90a 	bl	80003ee <LL_ADC_IsEnabled>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f9      	beq.n	80011d4 <Start_ADC+0xc>

	/* Start ADC group regular conversion */
	LL_ADC_REG_StartConversionSWStart(ADC1);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <Start_ADC+0x24>)
 80011e2:	f7ff f916 	bl	8000412 <LL_ADC_REG_StartConversionSWStart>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40012400 	.word	0x40012400

080011f0 <Start_PWM>:

/* Start PWM */
void Start_PWM()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	// Enable timer counter
	LL_TIM_EnableCounter(TIM3);
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <Start_PWM+0x18>)
 80011f6:	f7ff fbe1 	bl	80009bc <LL_TIM_EnableCounter>
	// Enable capture/compare channels
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 80011fa:	2101      	movs	r1, #1
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <Start_PWM+0x18>)
 80011fe:	f7ff fbfb 	bl	80009f8 <LL_TIM_CC_EnableChannel>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40000400 	.word	0x40000400

0800120c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4013      	ands	r3, r2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	b2db      	uxtb	r3, r3
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40010400 	.word	0x40010400

08001238 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <LL_EXTI_ClearFlag_0_31+0x18>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6153      	str	r3, [r2, #20]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40010400 	.word	0x40010400

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80012b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012b6:	f7ff ffa9 	bl	800120c <LL_EXTI_IsActiveFlag_0_31>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80012c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012c4:	f7ff ffb8 	bl	8001238 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012da:	490d      	ldr	r1, [pc, #52]	; (8001310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f0:	4c0a      	ldr	r4, [pc, #40]	; (800131c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012fe:	f7ff ffe5 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001302:	f000 ffd7 	bl	80022b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001306:	f7ff fcf9 	bl	8000cfc <main>
  bx lr
 800130a:	4770      	bx	lr
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001314:	0800235c 	.word	0x0800235c
  ldr r2, =_sbss
 8001318:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800131c:	20000220 	.word	0x20000220

08001320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC1_2_IRQHandler>

08001322 <LL_ADC_REG_SetSequencerLength>:
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <LL_ADC_IsEnabled>:
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b01      	cmp	r3, #1
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2db      	uxtb	r3, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
	...

0800136c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001376:	2300      	movs	r3, #0
 8001378:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800137a:	4813      	ldr	r0, [pc, #76]	; (80013c8 <LL_ADC_CommonInit+0x5c>)
 800137c:	f7ff ffe3 	bl	8001346 <LL_ADC_IsEnabled>
 8001380:	4604      	mov	r4, r0
 8001382:	4812      	ldr	r0, [pc, #72]	; (80013cc <LL_ADC_CommonInit+0x60>)
 8001384:	f7ff ffdf 	bl	8001346 <LL_ADC_IsEnabled>
 8001388:	4603      	mov	r3, r0
 800138a:	4323      	orrs	r3, r4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d114      	bne.n	80013ba <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	e008      	b.n	80013be <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	e001      	b.n	80013be <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	40012400 	.word	0x40012400
 80013cc:	40012800 	.word	0x40012800

080013d0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffb1 	bl	8001346 <LL_ADC_IsEnabled>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d112      	bne.n	8001410 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	e001      	b.n	8001414 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff8a 	bl	8001346 <LL_ADC_IsEnabled>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d131      	bne.n	800149c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00c      	beq.n	800145a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	430b      	orrs	r3, r1
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	e008      	b.n	800146c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8001474:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	6811      	ldr	r1, [r2, #0]
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	68d2      	ldr	r2, [r2, #12]
 8001480:	4311      	orrs	r1, r2
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	6912      	ldr	r2, [r2, #16]
 8001486:	430a      	orrs	r2, r1
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff44 	bl	8001322 <LL_ADC_REG_SetSequencerLength>
 800149a:	e001      	b.n	80014a0 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <LL_EXTI_EnableIT_0_31>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <LL_EXTI_EnableIT_0_31+0x20>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4904      	ldr	r1, [pc, #16]	; (80014cc <LL_EXTI_EnableIT_0_31+0x20>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40010400 	.word	0x40010400

080014d0 <LL_EXTI_DisableIT_0_31>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <LL_EXTI_DisableIT_0_31+0x20>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	43db      	mvns	r3, r3
 80014e0:	4903      	ldr	r1, [pc, #12]	; (80014f0 <LL_EXTI_DisableIT_0_31+0x20>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40010400 	.word	0x40010400

080014f4 <LL_EXTI_EnableEvent_0_31>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <LL_EXTI_EnableEvent_0_31+0x20>)
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4904      	ldr	r1, [pc, #16]	; (8001514 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40010400 	.word	0x40010400

08001518 <LL_EXTI_DisableEvent_0_31>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	43db      	mvns	r3, r3
 8001528:	4903      	ldr	r1, [pc, #12]	; (8001538 <LL_EXTI_DisableEvent_0_31+0x20>)
 800152a:	4013      	ands	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40010400 	.word	0x40010400

0800153c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	4904      	ldr	r1, [pc, #16]	; (800155c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4313      	orrs	r3, r2
 800154e:	608b      	str	r3, [r1, #8]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40010400 	.word	0x40010400

08001560 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	43db      	mvns	r3, r3
 8001570:	4903      	ldr	r1, [pc, #12]	; (8001580 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001572:	4013      	ands	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40010400 	.word	0x40010400

08001584 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	4904      	ldr	r1, [pc, #16]	; (80015a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4313      	orrs	r3, r2
 8001596:	60cb      	str	r3, [r1, #12]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40010400 	.word	0x40010400

080015a8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4903      	ldr	r1, [pc, #12]	; (80015c8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	60cb      	str	r3, [r1, #12]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40010400 	.word	0x40010400

080015cc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	791b      	ldrb	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d065      	beq.n	80016ac <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d06c      	beq.n	80016c2 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	795b      	ldrb	r3, [r3, #5]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d01c      	beq.n	800162a <LL_EXTI_Init+0x5e>
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	dc25      	bgt.n	8001640 <LL_EXTI_Init+0x74>
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <LL_EXTI_Init+0x32>
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d00b      	beq.n	8001614 <LL_EXTI_Init+0x48>
 80015fc:	e020      	b.n	8001640 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff88 	bl	8001518 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff4d 	bl	80014ac <LL_EXTI_EnableIT_0_31>
          break;
 8001612:	e018      	b.n	8001646 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff59 	bl	80014d0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff66 	bl	80014f4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001628:	e00d      	b.n	8001646 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff3c 	bl	80014ac <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5b 	bl	80014f4 <LL_EXTI_EnableEvent_0_31>
          break;
 800163e:	e002      	b.n	8001646 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
          break;
 8001644:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	799b      	ldrb	r3, [r3, #6]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d039      	beq.n	80016c2 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d01c      	beq.n	8001690 <LL_EXTI_Init+0xc4>
 8001656:	2b03      	cmp	r3, #3
 8001658:	dc25      	bgt.n	80016a6 <LL_EXTI_Init+0xda>
 800165a:	2b01      	cmp	r3, #1
 800165c:	d002      	beq.n	8001664 <LL_EXTI_Init+0x98>
 800165e:	2b02      	cmp	r3, #2
 8001660:	d00b      	beq.n	800167a <LL_EXTI_Init+0xae>
 8001662:	e020      	b.n	80016a6 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff9d 	bl	80015a8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff62 	bl	800153c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001678:	e024      	b.n	80016c4 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff6e 	bl	8001560 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff7b 	bl	8001584 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800168e:	e019      	b.n	80016c4 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff51 	bl	800153c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff70 	bl	8001584 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80016a4:	e00e      	b.n	80016c4 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
            break;
 80016aa:	e00b      	b.n	80016c4 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff0d 	bl	80014d0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff2c 	bl	8001518 <LL_EXTI_DisableEvent_0_31>
 80016c0:	e000      	b.n	80016c4 <LL_EXTI_Init+0xf8>
      }
 80016c2:	bf00      	nop
  }
  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <LL_GPIO_SetPinMode>:
{
 80016ce:	b490      	push	{r4, r7}
 80016d0:	b088      	sub	sp, #32
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	461a      	mov	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	0e1b      	lsrs	r3, r3, #24
 80016e2:	4413      	add	r3, r2
 80016e4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80016e6:	6822      	ldr	r2, [r4, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	613b      	str	r3, [r7, #16]
  return result;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	210f      	movs	r1, #15
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	61bb      	str	r3, [r7, #24]
  return result;
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	6023      	str	r3, [r4, #0]
}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bc90      	pop	{r4, r7}
 8001730:	4770      	bx	lr

08001732 <LL_GPIO_SetPinSpeed>:
{
 8001732:	b490      	push	{r4, r7}
 8001734:	b088      	sub	sp, #32
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	0e1b      	lsrs	r3, r3, #24
 8001746:	4413      	add	r3, r2
 8001748:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800174a:	6822      	ldr	r2, [r4, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	613b      	str	r3, [r7, #16]
  return result;
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	2103      	movs	r1, #3
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	61bb      	str	r3, [r7, #24]
  return result;
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	6023      	str	r3, [r4, #0]
}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bc90      	pop	{r4, r7}
 8001794:	4770      	bx	lr

08001796 <LL_GPIO_SetPinOutputType>:
{
 8001796:	b490      	push	{r4, r7}
 8001798:	b088      	sub	sp, #32
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	0e1b      	lsrs	r3, r3, #24
 80017aa:	4413      	add	r3, r2
 80017ac:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80017ae:	6822      	ldr	r2, [r4, #0]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	613b      	str	r3, [r7, #16]
  return result;
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	2104      	movs	r1, #4
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	61bb      	str	r3, [r7, #24]
  return result;
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	6023      	str	r3, [r4, #0]
}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc90      	pop	{r4, r7}
 80017f8:	4770      	bx	lr

080017fa <LL_GPIO_SetPinPull>:
{
 80017fa:	b480      	push	{r7}
 80017fc:	b087      	sub	sp, #28
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	43db      	mvns	r3, r3
 8001810:	401a      	ands	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	613b      	str	r3, [r7, #16]
  return result;
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	408b      	lsls	r3, r1
 800182e:	431a      	orrs	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	60da      	str	r2, [r3, #12]
}
 8001834:	bf00      	nop
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b088      	sub	sp, #32
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	0c1b      	lsrs	r3, r3, #16
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	60fb      	str	r3, [r7, #12]
  return result;
 800185e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001868:	e044      	b.n	80018f4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800186a:	2201      	movs	r2, #1
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	409a      	lsls	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d03a      	beq.n	80018ee <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	2b07      	cmp	r3, #7
 800187c:	d806      	bhi.n	800188c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800187e:	f240 1201 	movw	r2, #257	; 0x101
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	e008      	b.n	800189e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	3b08      	subs	r3, #8
 8001890:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800189c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d106      	bne.n	80018b4 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	461a      	mov	r2, r3
 80018ac:	69b9      	ldr	r1, [r7, #24]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa3 	bl	80017fa <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	461a      	mov	r2, r3
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff06 	bl	80016ce <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d003      	beq.n	80018d2 <LL_GPIO_Init+0x94>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b09      	cmp	r3, #9
 80018d0:	d10d      	bne.n	80018ee <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	461a      	mov	r2, r3
 80018d8:	69b9      	ldr	r1, [r7, #24]
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff29 	bl	8001732 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	461a      	mov	r2, r3
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff54 	bl	8001796 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1b4      	bne.n	800186a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <LL_RCC_GetSysClkSource>:
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <LL_RCC_GetSysClkSource+0x14>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40021000 	.word	0x40021000

08001924 <LL_RCC_GetAHBPrescaler>:
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <LL_RCC_GetAHBPrescaler+0x14>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	40021000 	.word	0x40021000

0800193c <LL_RCC_GetAPB1Prescaler>:
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000

08001954 <LL_RCC_GetAPB2Prescaler>:
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <LL_RCC_GetAPB2Prescaler+0x14>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40021000 	.word	0x40021000

0800196c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <LL_RCC_PLL_GetMainSource+0x14>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000

08001984 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000

0800199c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <LL_RCC_PLL_GetPrediv+0x18>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0c5b      	lsrs	r3, r3, #17
 80019a6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80019c0:	f000 f820 	bl	8001a04 <RCC_GetSystemClockFreq>
 80019c4:	4602      	mov	r2, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f83e 	bl	8001a50 <RCC_GetHCLKClockFreq>
 80019d4:	4602      	mov	r2, r0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f84c 	bl	8001a7c <RCC_GetPCLK1ClockFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f858 	bl	8001aa4 <RCC_GetPCLK2ClockFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60da      	str	r2, [r3, #12]
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001a0e:	f7ff ff7d 	bl	800190c <LL_RCC_GetSysClkSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d00c      	beq.n	8001a32 <RCC_GetSystemClockFreq+0x2e>
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d80e      	bhi.n	8001a3a <RCC_GetSystemClockFreq+0x36>
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <RCC_GetSystemClockFreq+0x22>
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d003      	beq.n	8001a2c <RCC_GetSystemClockFreq+0x28>
 8001a24:	e009      	b.n	8001a3a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <RCC_GetSystemClockFreq+0x48>)
 8001a28:	607b      	str	r3, [r7, #4]
      break;
 8001a2a:	e009      	b.n	8001a40 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <RCC_GetSystemClockFreq+0x48>)
 8001a2e:	607b      	str	r3, [r7, #4]
      break;
 8001a30:	e006      	b.n	8001a40 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001a32:	f000 f84b 	bl	8001acc <RCC_PLL_GetFreqDomain_SYS>
 8001a36:	6078      	str	r0, [r7, #4]
      break;
 8001a38:	e002      	b.n	8001a40 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <RCC_GetSystemClockFreq+0x48>)
 8001a3c:	607b      	str	r3, [r7, #4]
      break;
 8001a3e:	bf00      	nop
  }

  return frequency;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	007a1200 	.word	0x007a1200

08001a50 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001a58:	f7ff ff64 	bl	8001924 <LL_RCC_GetAHBPrescaler>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <RCC_GetHCLKClockFreq+0x28>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	40d3      	lsrs	r3, r2
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	0800233c 	.word	0x0800233c

08001a7c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001a84:	f7ff ff5a 	bl	800193c <LL_RCC_GetAPB1Prescaler>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	461a      	mov	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	40d3      	lsrs	r3, r2
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	0800234c 	.word	0x0800234c

08001aa4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001aac:	f7ff ff52 	bl	8001954 <LL_RCC_GetAPB2Prescaler>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	0adb      	lsrs	r3, r3, #11
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	40d3      	lsrs	r3, r2
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	0800234c 	.word	0x0800234c

08001acc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001ada:	f7ff ff47 	bl	800196c <LL_RCC_PLL_GetMainSource>
 8001ade:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aec:	d003      	beq.n	8001af6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001aee:	e00b      	b.n	8001b08 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001af2:	607b      	str	r3, [r7, #4]
      break;
 8001af4:	e00b      	b.n	8001b0e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001af6:	f7ff ff51 	bl	800199c <LL_RCC_PLL_GetPrediv>
 8001afa:	4603      	mov	r3, r0
 8001afc:	3301      	adds	r3, #1
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	607b      	str	r3, [r7, #4]
      break;
 8001b06:	e002      	b.n	8001b0e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001b0a:	607b      	str	r3, [r7, #4]
      break;
 8001b0c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001b0e:	f7ff ff39 	bl	8001984 <LL_RCC_PLL_GetMultiplicator>
 8001b12:	4603      	mov	r3, r0
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	3302      	adds	r3, #2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	003d0900 	.word	0x003d0900
 8001b2c:	007a1200 	.word	0x007a1200

08001b30 <LL_TIM_SetPrescaler>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <LL_TIM_SetAutoReload>:
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <LL_TIM_SetRepetitionCounter>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <LL_TIM_OC_SetCompareCH1>:
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <LL_TIM_OC_SetCompareCH2>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <LL_TIM_OC_SetCompareCH3>:
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <LL_TIM_OC_SetCompareCH4>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	615a      	str	r2, [r3, #20]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <LL_TIM_Init+0xb0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00b      	beq.n	8001c34 <LL_TIM_Init+0x30>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c22:	d007      	beq.n	8001c34 <LL_TIM_Init+0x30>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <LL_TIM_Init+0xb4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d003      	beq.n	8001c34 <LL_TIM_Init+0x30>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <LL_TIM_Init+0xb8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d106      	bne.n	8001c42 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <LL_TIM_Init+0xb0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00b      	beq.n	8001c62 <LL_TIM_Init+0x5e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c50:	d007      	beq.n	8001c62 <LL_TIM_Init+0x5e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <LL_TIM_Init+0xb4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d003      	beq.n	8001c62 <LL_TIM_Init+0x5e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <LL_TIM_Init+0xb8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d106      	bne.n	8001c70 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff64 	bl	8001b4a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	4619      	mov	r1, r3
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff51 	bl	8001b30 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <LL_TIM_Init+0xb0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d105      	bne.n	8001ca2 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff61 	bl	8001b64 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff9f 	bl	8001be6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40012c00 	.word	0x40012c00
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40000800 	.word	0x40000800

08001cc0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd6:	d027      	beq.n	8001d28 <LL_TIM_OC_Init+0x68>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cde:	d82a      	bhi.n	8001d36 <LL_TIM_OC_Init+0x76>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce6:	d018      	beq.n	8001d1a <LL_TIM_OC_Init+0x5a>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cee:	d822      	bhi.n	8001d36 <LL_TIM_OC_Init+0x76>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d003      	beq.n	8001cfe <LL_TIM_OC_Init+0x3e>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	d007      	beq.n	8001d0c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001cfc:	e01b      	b.n	8001d36 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f81f 	bl	8001d44 <OC1Config>
 8001d06:	4603      	mov	r3, r0
 8001d08:	75fb      	strb	r3, [r7, #23]
      break;
 8001d0a:	e015      	b.n	8001d38 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f87e 	bl	8001e10 <OC2Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	75fb      	strb	r3, [r7, #23]
      break;
 8001d18:	e00e      	b.n	8001d38 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f8e1 	bl	8001ee4 <OC3Config>
 8001d22:	4603      	mov	r3, r0
 8001d24:	75fb      	strb	r3, [r7, #23]
      break;
 8001d26:	e007      	b.n	8001d38 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f944 	bl	8001fb8 <OC4Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	75fb      	strb	r3, [r7, #23]
      break;
 8001d34:	e000      	b.n	8001d38 <LL_TIM_OC_Init+0x78>
      break;
 8001d36:	bf00      	nop
  }

  return result;
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	f023 0201 	bic.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 0303 	bic.w	r3, r3, #3
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f023 0202 	bic.w	r2, r3, #2
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f023 0201 	bic.w	r2, r3, #1
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <OC1Config+0xc8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d11e      	bne.n	8001de4 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f023 0208 	bic.w	r2, r3, #8
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f023 0204 	bic.w	r2, r3, #4
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4619      	mov	r1, r3
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fec1 	bl	8001b7e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40012c00 	.word	0x40012c00

08001e10 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	f023 0210 	bic.w	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f023 0220 	bic.w	r2, r3, #32
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f023 0210 	bic.w	r2, r3, #16
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <OC2Config+0xd0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d11f      	bne.n	8001eb8 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	019b      	lsls	r3, r3, #6
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	019b      	lsls	r3, r3, #6
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fe64 	bl	8001b98 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40012c00 	.word	0x40012c00

08001ee4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0303 	bic.w	r3, r3, #3
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <OC3Config+0xd0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d11f      	bne.n	8001f8a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	029b      	lsls	r3, r3, #10
 8001f56:	4313      	orrs	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	015b      	lsls	r3, r3, #5
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fe08 	bl	8001bb2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40012c00 	.word	0x40012c00

08001fb8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	031b      	lsls	r3, r3, #12
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	031b      	lsls	r3, r3, #12
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <OC4Config+0xa0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d107      	bne.n	8002030 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	019b      	lsls	r3, r3, #6
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4619      	mov	r1, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fdc2 	bl	8001bcc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40012c00 	.word	0x40012c00

0800205c <LL_USART_IsEnabled>:
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800206c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <LL_USART_SetStopBitsLength>:
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	611a      	str	r2, [r3, #16]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr

080020a6 <LL_USART_SetHWFlowCtrl>:
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	615a      	str	r2, [r3, #20]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
	...

080020cc <LL_USART_SetBaudRate>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009a      	lsls	r2, r3, #2
 80020e2:	441a      	add	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	4a25      	ldr	r2, [pc, #148]	; (8002184 <LL_USART_SetBaudRate+0xb8>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	b299      	uxth	r1, r3
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009a      	lsls	r2, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	fbb2 f2f3 	udiv	r2, r2, r3
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <LL_USART_SetBaudRate+0xb8>)
 8002110:	fba3 0302 	umull	r0, r3, r3, r2
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	2064      	movs	r0, #100	; 0x64
 8002118:	fb00 f303 	mul.w	r3, r0, r3
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	3332      	adds	r3, #50	; 0x32
 8002122:	4a18      	ldr	r2, [pc, #96]	; (8002184 <LL_USART_SetBaudRate+0xb8>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	b29b      	uxth	r3, r3
 800212c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002130:	b29b      	uxth	r3, r3
 8002132:	440b      	add	r3, r1
 8002134:	b299      	uxth	r1, r3
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	009a      	lsls	r2, r3, #2
 8002140:	441a      	add	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	fbb2 f2f3 	udiv	r2, r2, r3
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <LL_USART_SetBaudRate+0xb8>)
 800214c:	fba3 0302 	umull	r0, r3, r3, r2
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	2064      	movs	r0, #100	; 0x64
 8002154:	fb00 f303 	mul.w	r3, r0, r3
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	3332      	adds	r3, #50	; 0x32
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <LL_USART_SetBaudRate+0xb8>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b29b      	uxth	r3, r3
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	b29b      	uxth	r3, r3
 800216e:	440b      	add	r3, r1
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	51eb851f 	.word	0x51eb851f

08002188 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff5e 	bl	800205c <LL_USART_IsEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d145      	bne.n	8002232 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021ae:	f023 030c 	bic.w	r3, r3, #12
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	6851      	ldr	r1, [r2, #4]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	68d2      	ldr	r2, [r2, #12]
 80021ba:	4311      	orrs	r1, r2
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	6912      	ldr	r2, [r2, #16]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ff57 	bl	8002082 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ff63 	bl	80020a6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80021e0:	f107 0308 	add.w	r3, r7, #8
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fbe7 	bl	80019b8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <LL_USART_Init+0xb4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d102      	bne.n	80021f8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	e00c      	b.n	8002212 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a11      	ldr	r2, [pc, #68]	; (8002240 <LL_USART_Init+0xb8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d102      	bne.n	8002206 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	e005      	b.n	8002212 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <LL_USART_Init+0xbc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00c      	beq.n	8002232 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002220:	2300      	movs	r3, #0
 8002222:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff4d 	bl	80020cc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002232:	7ffb      	ldrb	r3, [r7, #31]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40013800 	.word	0x40013800
 8002240:	40004400 	.word	0x40004400
 8002244:	40004800 	.word	0x40004800

08002248 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4a07      	ldr	r2, [pc, #28]	; (8002278 <LL_InitTick+0x30>)
 800225c:	3b01      	subs	r3, #1
 800225e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <LL_InitTick+0x30>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <LL_InitTick+0x30>)
 8002268:	2205      	movs	r2, #5
 800226a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002284:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffdd 	bl	8002248 <LL_InitTick>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80022a0:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <LL_SetSystemCoreClock+0x18>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	20000000 	.word	0x20000000

080022b4 <__libc_init_array>:
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	2600      	movs	r6, #0
 80022b8:	4d0c      	ldr	r5, [pc, #48]	; (80022ec <__libc_init_array+0x38>)
 80022ba:	4c0d      	ldr	r4, [pc, #52]	; (80022f0 <__libc_init_array+0x3c>)
 80022bc:	1b64      	subs	r4, r4, r5
 80022be:	10a4      	asrs	r4, r4, #2
 80022c0:	42a6      	cmp	r6, r4
 80022c2:	d109      	bne.n	80022d8 <__libc_init_array+0x24>
 80022c4:	f000 f822 	bl	800230c <_init>
 80022c8:	2600      	movs	r6, #0
 80022ca:	4d0a      	ldr	r5, [pc, #40]	; (80022f4 <__libc_init_array+0x40>)
 80022cc:	4c0a      	ldr	r4, [pc, #40]	; (80022f8 <__libc_init_array+0x44>)
 80022ce:	1b64      	subs	r4, r4, r5
 80022d0:	10a4      	asrs	r4, r4, #2
 80022d2:	42a6      	cmp	r6, r4
 80022d4:	d105      	bne.n	80022e2 <__libc_init_array+0x2e>
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022dc:	4798      	blx	r3
 80022de:	3601      	adds	r6, #1
 80022e0:	e7ee      	b.n	80022c0 <__libc_init_array+0xc>
 80022e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e6:	4798      	blx	r3
 80022e8:	3601      	adds	r6, #1
 80022ea:	e7f2      	b.n	80022d2 <__libc_init_array+0x1e>
 80022ec:	08002354 	.word	0x08002354
 80022f0:	08002354 	.word	0x08002354
 80022f4:	08002354 	.word	0x08002354
 80022f8:	08002358 	.word	0x08002358

080022fc <memset>:
 80022fc:	4603      	mov	r3, r0
 80022fe:	4402      	add	r2, r0
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	f803 1b01 	strb.w	r1, [r3], #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <_init>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr

08002318 <_fini>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	bf00      	nop
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr
